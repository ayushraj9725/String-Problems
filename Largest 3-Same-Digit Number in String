Problem name  : Largest 3-Same-Digit Number in String

Problem Statement : 

You are given a string num representing a large integer. An integer is good if it meets the following conditions:

It is a substring of num with length 3.
It consists of only one unique digit.
Return the maximum good integer as a string or an empty string "" if no such integer exists.

Note:

A substring is a contiguous sequence of characters within a string.
There may be leading zeroes in num or a good integer.
 
Example 1:
Input: num = "6777133339"
Output: "777"
Explanation: There are two distinct good integers: "777" and "333".

"777" is the largest, so we return "777".
Example 2:
Input: num = "2300019"
Output: "000"
Explanation: "000" is the only good integer.

Example 3:
Input: num = "42352338"
Output: ""
Explanation: No substring of length 3 consists of only one unique digit. Therefore, there are no good integers.
 
Constraints:

3 <= num.length <= 1000
num only consists of digits.


/***************************************************************************************   SOLUTIONS ***********************************************************************************/

/////////////////////////////// C++ ///////////////////////////////

string largestGoodInteger(string num) {
    string maxStr = "";

    for (int i = 0; i <= num.size() - 3; i++) {
        // Check if three consecutive digits are the same
        if (num[i] == num[i+1] && num[i+1] == num[i+2]) {
            string triplet = num.substr(i, 3);
            if (triplet > maxStr) {
                maxStr = triplet;
            }
        }
    }

    return maxStr;
}




////////////////////////////////////////   JAVA    //////////////////////////////////////

public class Solution {
    public String largestGoodInteger(String num) {
        String maxStr = "";

        for (int i = 0; i <= num.length() - 3; i++) {
            char c1 = num.charAt(i);
            char c2 = num.charAt(i + 1);
            char c3 = num.charAt(i + 2);

            if (c1 == c2 && c2 == c3) {
                String triplet = num.substring(i, i + 3);
                if (triplet.compareTo(maxStr) > 0) {
                    maxStr = triplet;
                }
            }
        }

        return maxStr;
    }
}
